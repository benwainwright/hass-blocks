---
import type { GetStaticPaths } from 'astro';
import { ApiDeclaredItem, ApiItemKind } from '@microsoft/api-extractor-model';

import {
  FunctionDetails,
  InterfaceDetails,
  SummaryTable,
  TsDocSection,
} from '@components';

import {
  getMemberArgs,
  getTsDocFromNode,
  getUnscopedPackageName,
  loadModels,
  modelsPath,
} from '@doc-model';
import { kebabize } from '@utils';

import { BaseLayout } from '@layouts';
import EnumDetails from 'src/components/enum-details/enum-details.astro';

export const getStaticPaths = (async () => {
  const { packages: apiPackages } = await loadModels(modelsPath);

  return apiPackages.flatMap((apiPackage) =>
    apiPackage.members[0].members.flatMap((member) => {
      if (member instanceof ApiDeclaredItem) {
        const withInterfaceArgs = getMemberArgs(member);

        return {
          params: {
            apiPackage: getUnscopedPackageName(apiPackage),
            memberName: kebabize(member.displayName),
          },
          props: {
            fullPackageName: apiPackage.displayName,
            tsDoc: getTsDocFromNode(member),
            type: member.kind,
            path: member.fileUrlPath,
            ...withInterfaceArgs,
          },
        };
      }
      return [];
    }),
  );
}) satisfies GetStaticPaths;

const { memberName } = Astro.params;
const {
  tsDoc,
  type,
  path,
  params,
  returnValue,
  signature,
  members,
  enumMembers,
} = Astro.props;

console.log(memberName);
if (memberName === 'get-config') {
  console.log(tsDoc?.remarks);
  console.log('foo');
}
---

<style>
  table {
    width: auto;
  }
</style>

<BaseLayout>
  <h2>{memberName}</h2>
  {tsDoc?.summary && <TsDocSection sections={tsDoc?.summary} />}
  {tsDoc?.remarks && <TsDocSection sections={tsDoc?.remarks} />}
  <SummaryTable {memberName} {type} {path} />
  {
    tsDoc?.example && (
      <>
        <h3>Example</h3>
        <TsDocSection sections={tsDoc?.example} />
      </>
    )
  }
  {
    type === ApiItemKind.Function && params && returnValue && signature && (
      <FunctionDetails {returnValue} {params} {signature} headingLevel="h3" />
    )
  }
  {type === ApiItemKind.Interface && members && <InterfaceDetails {members} />}
  {
    type === ApiItemKind.Enum && enumMembers && (
      <EnumDetails members={enumMembers} />
    )
  }
  {type === ApiItemKind.Class && members && <InterfaceDetails {members} />}
</BaseLayout>
