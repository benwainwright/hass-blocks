---
import type { GetStaticPaths } from 'astro';
import { getUnscopedPackageName } from '../../../../lib/doc-model/get-unscoped-package-name';
import { loadModels } from '../../../../lib/doc-model/load-models';
import { modelsPath } from '../../../../lib/doc-model/models-path';
import BaseLayout from '../../../../layouts/base-layout.astro';
import { kebabize } from '../../../../lib/kebabize';
import { getDocSummary } from '../../../../lib/doc-model/get-doc-summary';
import { ApiDeclaredItem, ApiItemKind } from '@microsoft/api-extractor-model';
import SummaryTable from '../../../../components/summary-table/summary-table.astro';
import FunctionDetails from '../../../../components/function-details/function-details.astro';
import { getFunctionArgs } from '../../../../lib/doc-model/get-function-args';
import { getInterfaceArgs } from '../../../../lib/doc-model/get-interface-args';
import InterfaceDetails from '../../../../components/interface-details/interface-details.astro';

export const getStaticPaths = (async () => {
  const { packages: apiPackages } = await loadModels(modelsPath);

  return apiPackages.flatMap((apiPackage) =>
    apiPackage.members[0].members.flatMap((member) => {
      if (member instanceof ApiDeclaredItem) {
        const withFunctionArgs = getFunctionArgs(member);
        const withInterfaceArgs = getInterfaceArgs(member);

        return {
          params: {
            apiPackage: getUnscopedPackageName(apiPackage),
            memberName: kebabize(member.displayName),
          },
          props: {
            fullPackageName: apiPackage.displayName,
            description: getDocSummary(member),
            type: member.kind,
            path: member.fileUrlPath,
            ...withFunctionArgs,
            ...withInterfaceArgs,
          },
        };
      }
      return [];
    }),
  );
}) satisfies GetStaticPaths;

const { memberName } = Astro.params;
const {
  description,
  fullPackageName,
  type,
  path,
  params,
  returnValue,
  members,
} = Astro.props;
---

<style>
  table {
    width: auto;
  }
</style>

<BaseLayout>
  <h2>{fullPackageName}.{memberName}</h2>
  <p>{description}</p>
  <SummaryTable {memberName} {type} {path} />
  {
    type === ApiItemKind.Function && params && (
      <FunctionDetails {returnValue} {params} />
    )
  }
  {type === ApiItemKind.Interface && members && <InterfaceDetails {members} />}
</BaseLayout>
