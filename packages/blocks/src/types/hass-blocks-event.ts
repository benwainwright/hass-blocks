import { ITrigger } from './i-trigger.ts';
import { Event } from '@hass-blocks/hass-ts';
import { BlockOutput } from './block-output.ts';
import { SerialisedBlock } from './serialised-block.ts';

/**
 * @public
 *
 * Events published by the framework on the event bus
 */
export type HassBlocksEvent =
  | AutomationRegistered
  | GeneralFailure
  | LogEvent
  | StateChanged
  | BlockFailed
  | BlockFinished
  | BlockPending
  | BlockStarted
  | SequenceAborted
  | LoadPluginsStart
  | LoadPluginStart
  | LoadPluginsFinished
  | LoadPluginFinished;

/**
 * @public
 *
 * An event emitted whenever you want to log information. Will be picked up by
 * logging clients
 */
export interface LogEvent {
  /**
   * The log message
   */
  message: string;

  /**
   * The module that emitted the log message
   */
  module: string;

  /**
   * The event type
   */
  type: 'log-event';

  /**
   * The log level
   */
  level: 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal';
}

/**
 * @public
 *
 * An event that is emitted just before all plugins start loading
 */
export interface LoadPluginsStart {
  /**
   * The type of the event
   */
  type: 'load-plugins-started';
}

/**
 * @public
 *
 * An event that is emitted just before a specific plugin starts loading
 */
export interface LoadPluginStart {
  /**
   * The type of the event
   */
  type: 'load-plugin-started';

  /**
   * The name of the plugin that is about to start loading
   */
  name: string;
}

/**
 * @public
 *
 * An event that is emitted just after a specific plugin finishes loading
 */
export interface LoadPluginFinished {
  /**
   * The type of the event
   */
  type: 'load-plugin-finished';

  /**
   * The name of the plugin that finished loading
   */
  name: string;
}

/**
 * @public
 *
 * An event that is emitted after all plugins have finished loading
 */
export interface LoadPluginsFinished {
  /**
   * The type of the event
   */
  type: 'load-plugins-finished';

  /**
   * A loist of plugins that were loaded
   */
  plugins: string[];
}

/**
 * @public
 *
 * An event that is emitted when the websocket client recieves a state change from Hass
 */
export interface StateChanged {
  /**
   * The type of the event
   */
  type: 'hass-state-changed';

  /**
   * The entity that changed state
   */
  entity: string;

  /**
   * The raw event data from Home Assistant
   */
  hassEvent: Event;
}

/**
 * @public
 *
 * The base event for all events related to automations emitted by this framework
 */
export interface BaseHassEvent {
  /**
   * A unique uuid generated each time a trigger is fired. All blocks that are executed
   * as a result of that trigger will get the same triggerId
   */
  triggerId: string;

  /**
   * A unique uuid that is generated for all events associated with a single execution of a given
   * block. This uuid is different every time the block is executed but the same for all of the lifecycle
   * events associated with that execution
   */
  executeId: string;

  /**
   * The name of the block being executed
   */
  name: string;

  /**
   * A serialised version of the block being executed
   */
  block: SerialisedBlock;
}

/**
 * @public
 *
 * An event that is emitted when an automation has been registered
 */
export interface AutomationRegistered {
  /**
   * The type of the event
   */
  type: 'automation';

  /**
   * The name of the automation that was registered
   */
  name: string;

  /**
   * A serialised version of the block that was registered
   */
  block: SerialisedBlock;

  /**
   * The status of the event
   */
  status: 'registered';
}

/**
 * @public
 *
 * An event that is emitted when there is some kind of error
 */
export interface GeneralFailure {
  /**
   * The type of the event
   */
  type: 'generalFailure';

  /**
   * The status of the event
   */
  status: 'error';

  /**
   * The message string that was generated by the error
   */
  message: string;

  /**
   * The original error object
   */
  error: Error;
}

/**
 * @public
 *
 * An event that is emitted when a block starts executing
 */
export interface BlockStarted extends BaseHassEvent {
  /**
   * The type of block that has started
   */
  type: string;

  /**
   * The block execution lifecycle status
   */
  status: 'started';

  /**
   * The parent block (often this will be the automation that triggered the block execution)
   */
  parent?: SerialisedBlock;

  /**
   * The trigger object that started this execution sequence
   */
  triggeredBy?: ITrigger;
}

/**
 * @public
 *
 * An event that is emitted when a block finishes successfully
 */
export interface BlockFinished<O = unknown> extends BaseHassEvent {
  /**
   * The type of block that has started
   */
  type: string;

  /**
   * The block execution lifecycle status
   */
  status: 'finished';

  /**
   * The output that was returned by the block callback
   */
  output: BlockOutput<O>;

  /**
   * The parent block (often this will be the automation that triggered the block execution)
   */
  parent?: SerialisedBlock;
}

/**
 * @public
 *
 * An event that is emitted when a block fails for some reason
 */
export interface BlockFailed extends BaseHassEvent {
  /**
   * The type of block that failed
   */
  type: string;

  /**
   * The block execution lifecycle status
   */
  status: 'failed';

  /**
   * The message that explains why the block failed
   */
  message: string;

  /**
   * The original error object
   */
  error: Error;

  /**
   * The parent block (often this will be the automation that triggered the block execution)
   */
  parent?: SerialisedBlock;
}

/**
 * @public
 *
 * An event that is emitted when a block is queued for execution
 */
export interface BlockPending extends BaseHassEvent {
  /**
   * The type of block that was queued
   */
  type: string;

  /**
   * The block execution lifecycle status
   */
  status: 'pending';

  /**
   * The parent block (often this will be the automation that triggered the block execution)
   */
  parent?: SerialisedBlock;

  /**
   * The trigger object that started this execution sequence
   */
  triggeredBy?: ITrigger;
}

/**
 * @public
 *
 * An event that is emitted when a sequence is aborted for some reason
 */
export interface SequenceAborted extends BaseHassEvent {
  /**
   * The type of block that was aborted
   */
  type: string;

  /**
   * The block execution lifecycle status
   */
  status: 'aborted';

  /**
   * A serialised version of the block that caused the sequence to be aborted
   */
  block: SerialisedBlock;

  /**
   * The name of the block that caused the sequence to be aborted
   */
  name: string;
}
